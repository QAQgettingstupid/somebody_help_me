/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.104
 * Generated at: 2025-05-05 13:21:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Stack;

public final class calculator_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(4);
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("java.util.Stack");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("    ");
 
        //所有page共用文字框
        String ans = request.getParameter("text");
        
        // 計算所需結構
        Map<Character, Integer> priority = new HashMap<>();
        priority.put('-', 1);
        priority.put('+', 1);
        priority.put('/', 2);
        priority.put('*', 2);
        Stack<Character> operator = new Stack<>();
        Stack<Double> operand = new Stack<>();
        Double temp_num;
        int index = 0, numfront = 0;
        boolean negative = false, changed = false;
        
        //初始化文字框
        if(ans == null) 
            ans="";

       //清除功能     
       if(request.getParameter("clear") !=null) 
            ans="";
    
       //判斷被觸發的按鍵
       String button=request.getParameter("bt"); 

       // 0~9, + - * / .
       if(button !=null && !button.equals("="))
            ans += button;
       
       // "="計算
       else if(ans != null && ans != ""){
        // 逐個讀取輸入字元
        while (index < ans.length()) {
            if (changed == false
                    && (ans.charAt(index) == '.' || (ans.charAt(index) <= '9' && ans.charAt(index) >= '0'))) {
                numfront = index;
                changed = true;
            } else if (ans.charAt(index) == '+' || ans.charAt(index) == '-' || ans.charAt(index) == '*'
                    || ans.charAt(index) == '/' || ans.charAt(index) == '(' || ans.charAt(index) == ')') {

                // 放入數字
                if (changed) {
                    temp_num = Double.parseDouble(ans.substring(numfront, index));
                    if (negative) {
                        operand.push(temp_num * (-1));
                        negative = false;
                    } else
                        operand.push(temp_num);
                    changed = false;
                }

                // 負號
                if (ans.charAt(index) == '-'
                        && (index == 0
                                || (index - 1 >= 0
                                        && (ans.charAt(index - 1) == '+' || ans.charAt(index - 1) == '('
                                                || ans.charAt(index - 1) == '*' || ans.charAt(index - 1) == '-'
                                                || ans.charAt(index - 1) == '/')))) {
                    negative = true;
                    index++;
                    continue;
                }

                else {

                    // 輸入優先權小於等於stack top,先pop進行運算
                    while (!operator.empty()
                            && priority.get(operator.peek()) >= priority.get(ans.charAt(index))) {

                        Character c = operator.peek();
                        Double result = 0.0;
                        Double back = operand.peek();
                        operand.pop();
                        Double front = operand.peek();
                        operand.pop();
        
                        switch (c) {
                            case '+':
                                result = front + back;
                                break;
                            case '-':
                                result = front - back;
                                break;
                            case '*':
                                result = front * back;
                                break;
                            case '/':
                                result = front / back;
                                break;
                        }
                        operand.push(result);
                        operator.pop();
                    }
                    operator.push(ans.charAt(index));
                }
            }
            index++;
        }
        if (changed) {
            temp_num = Double.parseDouble(ans.substring(numfront, index));
            if (negative) {
                operand.push(temp_num * (-1));
                negative = false;
            } else
                operand.push(temp_num);
        }

        // 檢查是否還有運算子尚未運算
        while (!operator.empty()) {
            Character c=operator.peek();
            Double result = 0.0;
            Double back = operand.peek();
            operand.pop();
            Double front = operand.peek();
            operand.pop();

            switch (c) {
                case '+':
                    result = front + back;
                    break;
                case '-':
                    result = front - back;
                    break;
                case '*':
                    result = front * back;
                    break;
                case '/':
                    result = front / back;
                    break;
                    }
            operand.push(result);
            operator.pop();
        }
        ans = Double.toString(operand.peek());
       }
       
      out.write("\r\n");
      out.write("        <HTML>\r\n");
      out.write("\r\n");
      out.write("        <HEAD>\r\n");
      out.write("            <TITLE>小算盤</TITLE>\r\n");
      out.write("        </HEAD>\r\n");
      out.write("\r\n");
      out.write("        <BODY>\r\n");
      out.write("            <form method=\"post\" action=\"calculator.jsp\">\r\n");
      out.write("                        ");
      out.write("\r\n");
      out.write("                            <p><input type=\"text\" value=\"");
      out.print(ans );
      out.write("\" name=\"text\"></p>\r\n");
      out.write("\r\n");
      out.write("                            <p><input type=\"submit\" value=\"1\" name=\"bt\">\r\n");
      out.write("                                <input type=\"submit\" value=\"2\" name=\"bt\">\r\n");
      out.write("                                <input type=\"submit\" value=\"3\" name=\"bt\">\r\n");
      out.write("                                <input type=\"submit\" value=\"+\" name=\"bt\">\r\n");
      out.write("                            </p>\r\n");
      out.write("\r\n");
      out.write("                            <p>\r\n");
      out.write("                                <input type=\"submit\" value=\"4\" name=\"bt\">\r\n");
      out.write("                                <input type=\"submit\" value=\"5\" name=\"bt\">\r\n");
      out.write("                                <input type=\"submit\" value=\"6\" name=\"bt\">\r\n");
      out.write("                                <input type=\"submit\" value=\"-\" name=\"bt\">\r\n");
      out.write("                            </p>\r\n");
      out.write("\r\n");
      out.write("                            <p>\r\n");
      out.write("                                <input type=\"submit\" value=\"7\" name=\"bt\">\r\n");
      out.write("                                <input type=\"submit\" value=\"8\" name=\"bt\">\r\n");
      out.write("                                <input type=\"submit\" value=\"9\" name=\"bt\">\r\n");
      out.write("                                <input type=\"submit\" value=\"*\" name=\"bt\">\r\n");
      out.write("                            </p>\r\n");
      out.write("\r\n");
      out.write("                            <p>\r\n");
      out.write("                                <input type=\"submit\" value=\".\" name=\"bt\">\r\n");
      out.write("                                <input type=\"submit\" value=\"0\" name=\"bt\">\r\n");
      out.write("                                <input type=\"submit\" value=\"/\" name=\"bt\">\r\n");
      out.write("                                <input type=\"submit\" value=\"=\" name=bt>\r\n");
      out.write("                            </p>\r\n");
      out.write("\r\n");
      out.write("                            <p><input type=\"submit\" value=\"清除\" name=clear></p>\r\n");
      out.write("            </form>\r\n");
      out.write("        </BODY>\r\n");
      out.write("\r\n");
      out.write("        </HTML>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
